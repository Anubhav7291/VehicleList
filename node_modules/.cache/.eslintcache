[{"C:\\Users\\anubh\\Desktop\\FaceLikeUI\\facelike\\src\\index.tsx":"1","C:\\Users\\anubh\\Desktop\\FaceLikeUI\\facelike\\src\\App.tsx":"2","C:\\Users\\anubh\\Desktop\\FaceLikeUI\\facelike\\src\\Vehicle.tsx":"3","C:\\Users\\anubh\\Desktop\\FaceLikeUI\\facelike\\src\\UpdateForm.tsx":"4"},{"size":129,"mtime":1633197833690,"results":"5","hashOfConfig":"6"},{"size":158,"mtime":1633197912729,"results":"7","hashOfConfig":"6"},{"size":3088,"mtime":1633198878305,"results":"8","hashOfConfig":"6"},{"size":411,"mtime":1633195663810,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yv5dkg",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\anubh\\Desktop\\FaceLikeUI\\facelike\\src\\index.tsx",[],"C:\\Users\\anubh\\Desktop\\FaceLikeUI\\facelike\\src\\App.tsx",[],"C:\\Users\\anubh\\Desktop\\FaceLikeUI\\facelike\\src\\Vehicle.tsx",["19","20"],"C:\\Users\\anubh\\Desktop\\FaceLikeUI\\facelike\\src\\UpdateForm.tsx",[],["21","22"],{"ruleId":"23","severity":1,"message":"24","line":15,"column":24,"nodeType":"25","endLine":15,"endColumn":88},{"ruleId":"26","severity":1,"message":"27","line":69,"column":40,"nodeType":"28","endLine":69,"endColumn":99},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},"react-hooks/exhaustive-deps","Assignments to the 'response' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-global-assign","no-unsafe-negation"]